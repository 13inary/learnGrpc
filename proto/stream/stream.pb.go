// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.2
// source: stream.proto

package stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Req) Reset() {
	*x = Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req) ProtoMessage() {}

func (x *Req) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req.ProtoReflect.Descriptor instead.
func (*Req) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{0}
}

func (x *Req) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Rsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info string `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Rsp) Reset() {
	*x = Rsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rsp) ProtoMessage() {}

func (x *Rsp) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rsp.ProtoReflect.Descriptor instead.
func (*Rsp) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{1}
}

func (x *Rsp) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

var File_stream_proto protoreflect.FileDescriptor

var file_stream_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x19,
	0x0a, 0x03, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x03, 0x52, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x32, 0x4a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x13,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x04, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x04, 0x2e, 0x52, 0x73,
	0x70, 0x30, 0x01, 0x12, 0x13, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12, 0x04, 0x2e, 0x52, 0x65, 0x71,
	0x1a, 0x04, 0x2e, 0x52, 0x73, 0x70, 0x28, 0x01, 0x12, 0x16, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74,
	0x12, 0x04, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x04, 0x2e, 0x52, 0x73, 0x70, 0x28, 0x01, 0x30, 0x01,
	0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stream_proto_rawDescOnce sync.Once
	file_stream_proto_rawDescData = file_stream_proto_rawDesc
)

func file_stream_proto_rawDescGZIP() []byte {
	file_stream_proto_rawDescOnce.Do(func() {
		file_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_stream_proto_rawDescData)
	})
	return file_stream_proto_rawDescData
}

var file_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_stream_proto_goTypes = []interface{}{
	(*Req)(nil), // 0: Req
	(*Rsp)(nil), // 1: Rsp
}
var file_stream_proto_depIdxs = []int32{
	0, // 0: Stream.Get:input_type -> Req
	0, // 1: Stream.Put:input_type -> Req
	0, // 2: Stream.Chat:input_type -> Req
	1, // 3: Stream.Get:output_type -> Rsp
	1, // 4: Stream.Put:output_type -> Rsp
	1, // 5: Stream.Chat:output_type -> Rsp
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_stream_proto_init() }
func file_stream_proto_init() {
	if File_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stream_proto_goTypes,
		DependencyIndexes: file_stream_proto_depIdxs,
		MessageInfos:      file_stream_proto_msgTypes,
	}.Build()
	File_stream_proto = out.File
	file_stream_proto_rawDesc = nil
	file_stream_proto_goTypes = nil
	file_stream_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamClient interface {
	Get(ctx context.Context, in *Req, opts ...grpc.CallOption) (Stream_GetClient, error)
	Put(ctx context.Context, opts ...grpc.CallOption) (Stream_PutClient, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (Stream_ChatClient, error)
}

type streamClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClient(cc grpc.ClientConnInterface) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) Get(ctx context.Context, in *Req, opts ...grpc.CallOption) (Stream_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[0], "/Stream/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stream_GetClient interface {
	Recv() (*Rsp, error)
	grpc.ClientStream
}

type streamGetClient struct {
	grpc.ClientStream
}

func (x *streamGetClient) Recv() (*Rsp, error) {
	m := new(Rsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) Put(ctx context.Context, opts ...grpc.CallOption) (Stream_PutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[1], "/Stream/Put", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamPutClient{stream}
	return x, nil
}

type Stream_PutClient interface {
	Send(*Req) error
	CloseAndRecv() (*Rsp, error)
	grpc.ClientStream
}

type streamPutClient struct {
	grpc.ClientStream
}

func (x *streamPutClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamPutClient) CloseAndRecv() (*Rsp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Rsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Stream_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[2], "/Stream/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamChatClient{stream}
	return x, nil
}

type Stream_ChatClient interface {
	Send(*Req) error
	Recv() (*Rsp, error)
	grpc.ClientStream
}

type streamChatClient struct {
	grpc.ClientStream
}

func (x *streamChatClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamChatClient) Recv() (*Rsp, error) {
	m := new(Rsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServer is the server API for Stream service.
type StreamServer interface {
	Get(*Req, Stream_GetServer) error
	Put(Stream_PutServer) error
	Chat(Stream_ChatServer) error
}

// UnimplementedStreamServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServer struct {
}

func (*UnimplementedStreamServer) Get(*Req, Stream_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedStreamServer) Put(Stream_PutServer) error {
	return status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedStreamServer) Chat(Stream_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Req)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServer).Get(m, &streamGetServer{stream})
}

type Stream_GetServer interface {
	Send(*Rsp) error
	grpc.ServerStream
}

type streamGetServer struct {
	grpc.ServerStream
}

func (x *streamGetServer) Send(m *Rsp) error {
	return x.ServerStream.SendMsg(m)
}

func _Stream_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).Put(&streamPutServer{stream})
}

type Stream_PutServer interface {
	SendAndClose(*Rsp) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type streamPutServer struct {
	grpc.ServerStream
}

func (x *streamPutServer) SendAndClose(m *Rsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamPutServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Stream_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).Chat(&streamChatServer{stream})
}

type Stream_ChatServer interface {
	Send(*Rsp) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type streamChatServer struct {
	grpc.ServerStream
}

func (x *streamChatServer) Send(m *Rsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamChatServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Stream",
	HandlerType: (*StreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Stream_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Put",
			Handler:       _Stream_Put_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _Stream_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
